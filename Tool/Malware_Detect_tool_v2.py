import os
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter.ttk import Progressbar
import yara
import time  # Ensure time is imported

# Example YARA rule for detecting malicious Python code
MALICIOUS_CODE_RULES = """
rule Potential_Malware_Python_Code {
    strings:
        $s1 = "os.system"                   // Suspicious system calls
        $s2 = "subprocess.call"             // External command execution
        $s3 = "eval("                       // Dynamic code execution
        $s4 = "exec("                       // Dynamic code execution
        $s5 = "base64.b64decode("           // Encoded payloads
        $s6 = "socket.socket"               // Network connections
        
    condition:
        any of ($s*)
}
"""

# Malware detection tool class
class MalwareAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Malware and Phishing Detection Tool")
        self.root.geometry("600x500")  # Increased height for new phishing section
        self.is_dark_mode = True  # Start in dark mode by default
        self.yara_rules = yara.compile(source=MALICIOUS_CODE_RULES)

        # Set up user interface
        self.setup_ui()

    def setup_ui(self):
        # Dark Mode Colors (set as default)
        self.root.configure(bg='#2C3E50')

        # Title Label
        title_label = tk.Label(self.root, text="Malware and Phishing Detection Tool", font=("Helvetica", 16, 'bold'),
                               bg="#2C3E50", fg="white")
        title_label.pack(pady=20)

        # Scan File Button
        self.scan_button = tk.Button(self.root, text="Scan File", font=("Helvetica", 12),
                                     bg="#3498DB", fg="white", activebackground="#2980B9", command=self.scan_file)
        self.scan_button.pack(pady=10)

        # Check Phishing Link Button
        self.phishing_button = tk.Button(self.root, text="Check Phishing Link", font=("Helvetica", 12),
                                         bg="#E67E22", fg="white", activebackground="#D35400", command=self.check_phishing_link)
        self.phishing_button.pack(pady=10)

        # Progress Bar (hidden by default)
        self.progress = Progressbar(self.root, orient=tk.HORIZONTAL, length=400, mode='determinate')
        self.progress.pack(pady=20)
        self.progress.pack_forget()  # Initially hide the progress bar

        # Percentage Label (for the progress bar)
        self.percentage_label = tk.Label(self.root, text="", font=("Helvetica", 12, 'bold'), bg='#2C3E50', fg="white")
        self.percentage_label.pack(pady=10)
        self.percentage_label.pack_forget()

        # Toggle Dark Mode Button (Bottom Left Corner)
        self.dark_mode_button = tk.Button(self.root, text="Toggle Dark/Light Mode", font=("Helvetica", 10),
                                          bg="#7F8C8D", fg="white", activebackground="#95A5A6", command=self.toggle_dark_mode)
        self.dark_mode_button.pack(side=tk.BOTTOM, anchor="sw", pady=5, padx=5)

        # Exit Button (Bottom Center)
        self.exit_button = tk.Button(self.root, text="Exit", font=("Helvetica", 10, 'bold'),
                                     bg="#E74C3C", fg="white", activebackground="#C0392B", command=self.exit_app)
        self.exit_button.pack(side=tk.BOTTOM, anchor="s", pady=5)

        # Result Label for displaying the scan result
        self.result_label = tk.Label(self.root, text="", font=("Helvetica", 12, 'bold'), bg='#2C3E50', fg="white")
        self.result_label.pack(pady=20)

    def scan_file(self):
        # Select file to scan
        file_path = filedialog.askopenfilename()
        if not file_path:
            return

        # Show progress bar and percentage label
        self.progress.pack()
        self.percentage_label.pack()
        self.progress.start(10)  # Start the progress bar animation
        self.result_label.config(text="Scanning file...", fg="white")
        self.root.update_idletasks()  # Refresh the GUI to update the progress bar

        # Simulate progress bar while scanning
        for i in range(1, 101, 10):
            self.progress['value'] = i
            self.percentage_label.config(text=f"{i}%")
            self.root.update_idletasks()
            time.sleep(0.2)  # Simulating delay

        # Scan file for malware
        is_malicious, message = self.scan_for_malware(file_path)

        if is_malicious:
            self.result_label.config(text=f"File is malicious: {message}", fg="red")
        else:
            self.result_label.config(text=f"File is clean: {message}", fg="green")

        self.progress.stop()
        self.percentage_label.config(text="100%")

    def scan_for_malware(self, file_path):
        # Detect malware using YARA rules
        try:
            matches = self.yara_rules.match(file_path)

            if matches:
                return True, f"Potential malware detected: {matches}"
            else:
                return False, "No malicious patterns found."
        except Exception as e:
            return False, f"Error: {str(e)}"

    def check_phishing_link(self):
        # Prompt user to enter a link
        link = tk.simpledialog.askstring("Enter Link", "Please enter the link to check:")
        if not link:
            return

        # Read whitelist file
        try:
            with open("whitelist.txt", "r") as f:
                whitelist = f.read().splitlines()  # Read each line into a list

            # Check if the link is in the whitelist
            if link in whitelist:
                messagebox.showinfo("Phishing Check", "The link is trusted.")
            else:
                messagebox.showwarning("Phishing Alert", "The link is a phishing link!")
        except FileNotFoundError:
            messagebox.showerror("Error", "whitelist.txt file not found. Please ensure the file exists.")

    def toggle_dark_mode(self):
        if self.is_dark_mode:
            self.root.configure(bg='#F4F6F7')
            self.result_label.configure(bg='#F4F6F7', fg="black")
            self.dark_mode_button.configure(bg="#7F8C8D", fg="white")
            self.exit_button.configure(bg="#E74C3C", fg="white")
            self.is_dark_mode = False
        else:
            self.root.configure(bg='#2C3E50')
            self.result_label.configure(bg='#2C3E50', fg="white")
            self.dark_mode_button.configure(bg="#34495E", fg="white")
            self.exit_button.configure(bg="#C0392B", fg="white")
            self.is_dark_mode = True

    def exit_app(self):
        self.root.destroy()  # Correct method to exit the app


if __name__ == "__main__":
    root = tk.Tk()
    app = MalwareAnalyzerApp(root)
    root.mainloop()
